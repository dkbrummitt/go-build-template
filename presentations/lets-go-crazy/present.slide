Getting Started with Go
Let's GO Crazy
22 Aug 2019

Delicia Brummitt

http://dkbrummitt.com
http://github.com/dkbrummitt
@dkbrummitt

* A (very) Brief History of Go

- Created by Googlers Robert Griesemer, Rob Pike, and Ken Thompson
- Developed in 2007, but released on 2009
- The mission

    The goals of the Go project were to eliminate the slowness and clumsiness
    of software development at Google, and thereby to make the
    process more productive and scalable.

    The language was designed by and for people
    who write
    and read
    and debug
    and maintain
    large software systems.

    – Rob Pike, Creator of Golang –



* Cons of Go

- Compile (no immediate gratification)
- No generics support
- Dynamic Schema's (Blobs) take more effort

.image Coordinate-300-200-300x200.jpg 400 _

* Pros of Go

- Simplicy
- Performance
- Adoption rate
- Teeny Tiny containers
- Tooling

* When NOT to Choose Go

- It doesn't fit your business problem.
- It won't make you good.  If you are writing buggy (insert language here) you will write buggy Go
- You can't let go of (insert language here)

.image precious.jpg 400 _

* Getting Setup

Install

- Using binaries on Golang's site
- Using Package managers

.link https://golang.org/doc/install Golang.org
.link https://www.digitalocean.com/community/tutorials/how-to-install-go-and-set-up-a-local-programming-environment-on-macos Using Homebrew
.link https://www.digitalocean.com/community/tutorials/how-to-install-go-and-set-up-a-local-programming-environment-on-windows-10 Using Chocolatey
.link https://www.linode.com/docs/development/go/install-go-on-ubuntu/ Using linux

* Directory Structure - Flat

Most devlopers start here


    | go-project
     --> main.go
     --> helloworld.go
     --> handler.go

* Directory Structure - Flat Main

With a main that is usually very heavy

    package main

    import "fmt"

    func every(){    }

    func thing(){    }

    // place imaginiation here

    // main a driver function for your application/script
    func main(){
        // place imaginiation here
        every()
        thing()
        under()
        the()
        sun()
    }

* Directory Structure - Less Flat

Developers wind up closer to here as applications and services get more complex


    | go-project
     --| cmd // for binaries
     -----| cli
     -------> main.go
     --| docs // for documentation and READMEs
     --| pkg // for libs, services, interfaces
     -----| api
     -------> api.go
     -------> api_test.go
     -----| api
     -------> api.go
     -------> api_test.go
     -----| storage
     -------> storage.go
     -------> storage_test.go
     --| vendor // for imported pacakges
     -- Dockerfile
     -- Makefile
     -- go.mod
     -- go.sum
     -- // everything else



* Directory Structure - Less Flat Main

With a main that is very skinny

    package main

    import (...)

    func initDBConnection(){ ... } (Data, err)
    func initQueueConnection(){ ... } (Queue, err)
    func initLogger(){ ... } (Log, err)

    func main(){
        db,err := initQueueConnection()
        if err != nil{
            // exit stage left...
            return //quit early
        }
        q,err := initDBConnection()
        if err != nil{
            // exit stage right...
            return //quit early
        }
        ctx := context.Background()
        app :=api.NewApp(ctx, &db, &q, &log)
    }

* Dependency Managment, Vendoring and Modules

* Build

Building (aka compiling) Golang is very straight forward

    go build # for very flat dir structures
    go build ./... # to recurrsively all the files in your project

.image compile.jpg 400 _

* Run

You *dont* have to compile to run your application locally.

    go run main.go # for very flat
    go run cmd/api/main.go for less flat

You *do* have to compile to share the executable with other partners, vms, docker, ec2, etc

* Libraries vs binaries

* Receivers

* Concurrency - Go Routines

* Unit Testing

* Tools - fmt, returns, imports

* Tools - errcheck

* Tools - pprof

* Tools - gcflags

* Tools - Race

* Tools - gosec
