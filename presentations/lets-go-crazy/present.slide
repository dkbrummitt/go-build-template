Getting Started with Go
Let's GO Crazy
22 Aug 2019

Delicia Brummitt

http://dkbrummitt.com
http://github.com/dkbrummitt
@dkbrummitt

* A (very) Brief History of Go

- Created by Googlers Robert Griesemer, Rob Pike, and Ken Thompson
- Developed in 2007, but released on 2009
- The mission

    The goals of the Go project were to eliminate the slowness and clumsiness
    of software development at Google, and thereby to make the
    process more productive and scalable.

    The language was designed by and for people
    who write
    and read
    and debug
    and maintain
    large software systems.

.caption _Go_at_Google_ by [[https://talks.golang.org/2012/splash.article][Rob Pike]]


* Cons of Go

- Compile (no immediate gratification)
- No generics support
- Dynamic Schema's (Blobs) take more effort

.image Coordinate-300-200-300x200.jpg 400 _

* Pros of Go

- Simplicy
- Performance
- Adoption rate
- Teeny Tiny containers
- Tooling

* When NOT to Choose Go

- It doesn't fit your business problem.
- It won't make you good.  If you are writing buggy (insert language here) you will write buggy Go
- You can't let go of (insert language here)

.image precious.jpg 400 _

* Getting Setup

Install

- Using binaries on Golang's site
- Using Package managers

.link https://golang.org/doc/install Golang.org
.link https://www.digitalocean.com/community/tutorials/how-to-install-go-and-set-up-a-local-programming-environment-on-macos Using Homebrew
.link https://www.digitalocean.com/community/tutorials/how-to-install-go-and-set-up-a-local-programming-environment-on-windows-10 Using Chocolatey
.link https://www.linode.com/docs/development/go/install-go-on-ubuntu/ Using linux

* Conventions

- Directory structures tend to be flat
- .go file names are one word, Snake case (this_is_snake_case) if more than one word is needed
- error messages should be a all lower case, and not contain puntuation
- variable names tend to be very short
- seeing all caps in Variables/Constants is very rare. (URL, ID are known exceptions)
- else statements are supported, but not frequently used

* Program Structure

Golang programs typically consist of

- Package declaration
- imports
- types, variables and constants
- functions/methods
- statements and expressions
- comments

* Directory Structure - Flat

Most devlopers start here

    | go-project
     --> main.go
     --> helloworld.go
     --> handler.go

* Directory Structure - Flat Main

With a main that is usually very heavy

    package main

    import "fmt"

    func every(){    }

    func thing(){    }

    // place imaginiation here

    // main a driver function for your application/script
    func main(){
        // place imaginiation here
        every()
        thing()
        under()
        the()
        sun()
    }

* Directory Structure - Less Flat

Developers wind up closer to here as applications and services get more complex

    | go-project
     --| cmd // for binaries
     -----| cli
     -------> main.go
     --| docs // for documentation and READMEs
     --| pkg // for libs, services, interfaces
     -----| api
     -------> api.go
     -------> api_test.go
     -----| api
     -------> api.go
     -------> api_test.go
     -----| storage
     -------> storage.go
     -------> storage_test.go
     --| vendor // for imported pacakges
     -- Dockerfile
     -- Makefile
     -- go.mod
     -- go.sum
     -- // everything else



* Directory Structure - Less Flat Main

With a main that is very skinny

    package main

    import (...)

    func initDBConnection(){ ... } (Data, err)
    func initQueueConnection(){ ... } (Queue, err)
    func initLogger(){ ... } (Log, err)

    func main(){
        db,err := initQueueConnection()
        if err != nil{
            // exit stage left...
            return //quit early
        }
        q,err := initDBConnection()
        if err != nil{
            // exit stage right...
            return //quit early
        }
        ctx := context.Background()
        app :=api.NewApp(ctx, &db, &q, &log)
    }

* Dependency Managment, Vendoring and Modules

Golang uses git to facilitate dependency managment.
Need to share your code with others, commit it to a git repo, and they can import it

    import(
        "fmt" // import basic language support
        "github.com/user/repo" // top level of a dependency
        "github.com/user/repo/pkg/lib" // specific sub package
    )

A *module* is a collection of related Go packages that are versioned together as a single unit.
This feature was released with Go 1.11. You can add module support with

    go mod init

Vendor is how to provide older Go programs their dependencies. You can add vendoring support Using

    go mod vendor

* Installing dependencies

You can install dependencies on module projects variable

    go get path/to/repo // explicit
    go get ./... // implicitly installs after looking at import statements


For vendored projects, the go mod vendor call, also installs the dependencies

* Build

Building (aka compiling) Golang is very straight forward

    go build # for very flat dir structures
    go build ./... # to recurrsively all the files in your project

.image compile.jpg 400 _

* Run

You *dont* have to compile to run your application locally.

    go run main.go # for very flat
    go run cmd/api/main.go for less flat

You *do* have to compile to share the executable with other partners, vms, docker, ec2, etc

* Data types

    bool

    string

    int  int8  int16  int32  int64
    uint uint8 uint16 uint32 uint64 uintptr

    byte // alias for uint8

    rune // alias for int32
        // represents a Unicode code point

    float32 float64

    complex64 complex128

* Variables and Contants - Global

You do not have to use global variables

    package main

    var(
        DebugMode = true // public variable, visible outside of package
        seed = "-02349iyorhkgnmvki009eioryghj8" // not visible outside of package
    )

    const(
        Pi = 3.1452
    )

* Variables - Local

If you declare a local variable, you *must* use it.

    func doSomething(){
        a:= 1 // i am a short declaration
        var i, j int = 1, 2 // i also am a short declaration
        c, python, java := true, false, "no!" // i too am a short declaration

        var done bool // i am a long declaration
    }

* Structs

Structs are a collection of fields.

.code main.go /show Dog type/,/end show Dog type/

* Structs - Embedded

You can embed structs into other structs

.code main.go /show Pet type/,/end show Pet type/

* Structs - Nested

    // This pattern is useful when just dumping data out.
    // But it is frowned on
    type Configuration struct {
        Val   string
        Proxy struct {
            Address string
            Port    string
        }
    }

* Functions

Lets look at some code!

* Questions

.background questions.jpg
