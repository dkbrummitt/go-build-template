Getting Started with Go
Let's GO Crazy
22 Aug 2019

Delicia Brummitt
Sr Software/Systems Engineer, Warner Media
delicia.brummitt@turner.com
alyssa.herzog@turner.com

http://dkbrummitt.com
http://github.com/dkbrummitt
@dkbrummitt

* A (very) Brief History of Go

Some Text

* Cons of Go

- Compile (no immediate gratification)
- No generics support
- Dynamic Schema's (Blobs) take more effort

.image Coordinate-300-200-300x200.jpg 400 _

* Pros of Go

- Simplicy
- Performance
- Adoption rate
- Teeny Tiny containers
- Tooling

* When NOT to Choose Go

- It doesn't fit your business problem.
- It won't make you good.  If you are writing buggy (insert language here) you will write buggy Go
- You can't let go of (insert language here)

.image precious.jpg 400 _

* Getting Setup

Install

- Using binaries on Golang's site
- Using Package managers

.link https://golang.org/doc/install Golang.org
.link https://www.digitalocean.com/community/tutorials/how-to-install-go-and-set-up-a-local-programming-environment-on-macos Using Homebrew
.link https://www.digitalocean.com/community/tutorials/how-to-install-go-and-set-up-a-local-programming-environment-on-windows-10 Using Chocolatey
.link https://www.linode.com/docs/development/go/install-go-on-ubuntu/ Using linux

* Directory Structure - Flat

Most devlopers start here


    | go-project
     --> main.go
     --> helloworld.go
     --> handler.go

* Directory Structure - Flat Main

With a main that is usually very heavy

    package main

    import "fmt"

    func every(){    }

    func thing(){    }

    // place imaginiation here

    // main a driver function for your application/script
    func main(){
        // place imaginiation here
        every()
        thing()
        under()
        the()
        sun()
    }

* Directory Structure - Less Flat

Developers wind up closer to here as applications and services get more complex


    | go-project
     --| cmd // for binaries
     -----| cli
     -------> main.go
     --| docs // for documentation and READMEs
     --| pkg // for libs, services, interfaces
     -----| api
     -------> api.go
     -------> api_test.go
     -----| api
     -------> api.go
     -------> api_test.go
     -----| storage
     -------> storage.go
     -------> storage_test.go
     --| vendor // for imported pacakges
     -- Dockerfile
     -- Makefile
     -- go.mod
     -- go.sum
     -- // everything else



* Directory Structure - Flat Main

With a main that is usually very heavy

    package main

    import "fmt"

    func every(){    }

    func thing(){    }

    // place imaginiation here

    // main a driver function for your application/script
    func main(){
        // place imaginiation here
        every()
        thing()
        under()
        the()
        sun()
    }




* Vendoring and Modules

* Build and Run

* Libraries vs binaries

* Receivers

* Concurrency - Go Routines

* Unit Testing

* Tools - fmt, returns, imports

* Tools - errcheck

* Tools - pprof

* Tools - gcflags

* Tools - Race

* Tools - gosec
